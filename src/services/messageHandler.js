import { response } from 'express';
import whatsappService from './whatsappService.js';
import { appendToSheet, getAppointments, appendPauseToSheet, consultarMembresia } from './googleSheestsService.js';
import { preguntarAGemini } from './geminiService.js'; // ‚úÖ Import correcto de Gemini









class MessageHandler {
  constructor() {
    this.appointmentState={};
    this.userData = {};
    this.consultaCounter = {}; // Contador de consultas por usuario
    this.lastConsultDate = {}; // Fecha de la √∫ltima consulta
    this.userQueryCounts = {}; // { "+573001234567": { fecha: "2025-04-12", count: 1 } }
  }

  isThanksOrClosure(message) {
    const closurePhrases = [
      "gracias", "muchas gracias", "mil gracias",
      "todo claro", "perfecto", "genial", "excelente",
      "ok", "listo", "entendido", "vale", "de acuerdo"
    ];
  
    const normalizedMsg = message.toLowerCase()
      .replace(/[¬ø?!¬°.,-]/g, "");
  
    return closurePhrases.some(phrase => normalizedMsg.includes(phrase));
  }


  async handleIncomingMessage(message, senderInfo) {
    const from = message.from;
  
    const allowedTypes = ["text", "interactive", "button", "image", "audio", "video", "document"];
    if (!allowedTypes.includes(message.type)) {
      console.log(`üëÄ Mensaje ignorado: tipo "${message.type}" de ${from}`);
      return;
    }
  
    // Si ya finaliz√≥ el chat, ignorar todo salvo que diga "hola"
    const finalized = this.finalizedUsers?.[from];
    
    if (message?.type === 'text') {
      const rawMessage = message.text.body.trim();
      const incomingMessage = rawMessage.toLowerCase();
      const stripped = rawMessage.replace(/[\s\u200B-\u200D\uFEFF]/g, '');
  
      if (!stripped.length) {
        console.log(`üï≥Ô∏è Mensaje ignorado (vac√≠o o sin contenido visible) de ${from}`);
        return;
      }
  
      if (finalized && !incomingMessage.includes('hola')) {
        console.log(`üëã Usuario ${from} finaliz√≥ el chat. Ignorando: ${rawMessage}`);
        return;
      }
  
      const hasActiveFlow = this.appointmentState[from];
      const isGreeting = this.isGreeting(incomingMessage);
  
      // Solo procesar si:
      // 1. Es un saludo
      // 2. O tiene un flujo activo
      if (!hasActiveFlow && !isGreeting) {
        console.log(`Mensaje ignorado de ${from} (no hay flujo activo ni es saludo): ${rawMessage}`);
        return;
      }
  
      if (isGreeting) {
        delete this.finalizedUsers?.[from]; // üëà vuelve a permitir mensajes
        await this.sendWelcomeMessage(from, message.id, senderInfo);
        await this.sendWelcomeMenu(from);
      } else if (hasActiveFlow) {
        await this.handleAppointmentFlow(from, rawMessage, message.id);
      }
  
      await whatsappService.markAsRead(message.id);
    }
  
    // ‚úÖ Botones interactivos
    else if (message?.type === "interactive") {
      const option = message?.interactive?.button_reply?.id.toLowerCase().trim();

      if (option === 'otra_consulta') {
        if (this.consultaCounter[from] < 3) {
          this.appointmentState[from] = { step: "esperando_pregunta_ia" };
          await whatsappService.sendMessage(from, "üß† Estoy listo para responder tu consulta. ¬°Escribe tu pregunta!");
        } else {
          await whatsappService.sendMessage(from, "Has alcanzado el l√≠mite de 3 consultas por d√≠a. ¬°Vuelve ma√±ana! üòä");
          this.finalizedUsers = this.finalizedUsers || {};
          this.finalizedUsers[from] = true;
          delete this.appointmentState?.[from];
        }
        return;
      }

      if (option === 'finalizar_chat' || option === 'consulta_finalizar') {
        this.finalizedUsers = this.finalizedUsers || {};
        this.finalizedUsers[from] = true;
        delete this.appointmentState?.[from];
        await whatsappService.sendMessage(from, '‚úÖ Consulta finalizada. Si necesitas algo m√°s, escribe *Hola* para comenzar de nuevo. ¬°Que tengas un excelente d√≠a! üí™');
        return;
      }

      if (option === 'volver_menu') {
        delete this.finalizedUsers?.[from];
        await this.sendWelcomeMessage(from, message.id, senderInfo);
        await this.sendWelcomeMenu(from);
        return;
      }

      if (option === 'opcion_3') {
        this.appointmentState[from] = { step: "esperando_pregunta_ia" };
        await whatsappService.sendMessage(from, "üß† Estoy listo para responder tu consulta. ¬°Escribe tu pregunta!");
        return;
      }

      // Si tiene un flujo activo, manejarlo
      if (this.appointmentState[from]) {
        await this.handleAppointmentFlow(from, option, message.id);
      } 
      // Si es una opci√≥n del men√∫ principal, procesarla
      else if (['opcion_1', 'opcion_2'].includes(option)) {
        await this.handleMenuOption(from, option);
      }
      // Si no es ninguna de las anteriores, ignorar
      else {
        console.log(`Bot√≥n ignorado de ${from} (no es opci√≥n v√°lida): ${option}`);
        return;
      }

      await whatsappService.markAsRead(message.id);
    }
  }


  isGreeting(message) {
    const greetings = ["hola", "hello", "hi", "hol", "ola", "buenas tardes", "buenos d√≠as", "buenas noches","hola, buenas noches","hola, buenos dias","hola, buenas tardes","buenas",
    "hola, ¬øc√≥mo est√°s?", "hola, ¬øme pueden ayudar?"];
    const normalizedMsg = message.toLowerCase()
    .replace(/[¬ø?!¬°.,-]/g, ""); // Elimina signos de puntuaci√≥n
    return greetings.some(greeting => normalizedMsg.includes(greeting));
  }


  getSenderName(senderInfo) {
    return senderInfo.profile?.name || senderInfo.wa_id;
  }

  async sendWelcomeMessage(to, messageId, senderInfo) {
    const name = this.getSenderName(senderInfo);
    const now = new Date().getHours();

    let timeGreeting = "¬°Hola!"; // Valor por defecto
    if (now < 12) timeGreeting = "¬°Buenos d√≠as!";
    else if (now < 19) timeGreeting = "¬°Buenas tardes!";
    else timeGreeting = "¬°Buenas noches!";

    const welcomeMessage = 
      `${timeGreeting} ${name} üëã\n` + 
      `¬°Bienvenido a *GymBro*! üí™üèãÔ∏è‚Äç‚ôÇÔ∏è\n` +
      `Somos tu aliado para alcanzar tus objetivos fitness üî•\n` +
      `¬øEn qu√© puedo ayudarte hoy? üìå`;

    await whatsappService.sendMessage(to, welcomeMessage, messageId);
  }

  async sendWelcomeMenu(to) {
    const menuMessage = "Elige una opci√≥n:";
    const buttons = [
      { type: "reply", reply: { id: "opcion_1", title: "Agendar clases" } },
      { type: "reply", reply: { id: "opcion_2", title: "Consultar servicios" } },
      { type: "reply", reply: { id: "opcion_3", title: "Consulta abierta IAü§ñ" } }
    ];
  
    await whatsappService.sendInteractiveButtons(to, menuMessage, buttons);
  }
  

  async handleMenuOption(to, option) {
    let response;
    switch (option) {
      case "opcion_1":
        this.appointmentState[to] = { step: "name" };
        response = "Por favor, Ingresa tu nombre y apellido";
        break;
      case "opcion_2":
        this.appointmentState[to] = { step: "consultas_lista" };
        response = `üìã *Opciones de consulta:*\n\n1. Precios üí∞\n2. Horarios üïí\n3. Ubicaci√≥n y contacto üìç\n4. Consultar mensualidad üßæ\n5. Pausar membres√≠a ‚è∏Ô∏è\n6. Contactar asesor ü§ù`;
        break;
      case "opcion_3":
        this.appointmentState[to] = { step: "esperando_pregunta_ia" };
        response = "üß† Estoy listo para responder tu consulta. ¬°Escribe tu pregunta!";
        break;
    }
    await whatsappService.sendMessage(to, response);
  }

  async sendMedia(to, type) {
    let mediaUrl = "";
    let caption = "";
  
    switch (type) {
      case "audio":
        mediaUrl = "https://chatbotgymbro.s3.us-east-2.amazonaws.com/gymbroaudi.ogg";
        caption = "audio de bienvenidaüèãÔ∏è‚Äç‚ôÇÔ∏è";
        break;
      case "video":
        mediaUrl = "https://tu-bucket-s3/video.mp4";
        caption = "Video motivacional üí•";
        break;
      case "image":
        mediaUrl = "https://chatbotgymbro.s3.us-east-2.amazonaws.com/ChatGPT+Image+3+abr+2025%2C+08_26_07+p.m..png";
        caption = "Mira nuestro gym üèãÔ∏è‚Äç‚ôÇÔ∏è";
        break;
      case "document":
        mediaUrl = "https://chatbotgymbro.s3.us-east-2.amazonaws.com/planes_precios_gymbro.pdf";
        caption = "Planes y precios üìù";
        break;
      default:
        console.error("Tipo de medio no soportado");
        return;
    }
  
    await whatsappService.sendMediaMessage(to, type, mediaUrl, caption);
  }
  

  async handleAppointmentFlow(to, message, messageId) {
    const state = this.appointmentState[to];
    let response;

    // Manejo del bot√≥n "Nueva consulta" despu√©s de consultar membres√≠a
    if (message === "nueva_consulta") {
      state.step = "esperando_cedula_consulta";
      await whatsappService.sendMessage(to, "üîç Por favor, ingresa tu n√∫mero de c√©dula para consultar el estado de tu membres√≠a:");
      return;
    }

    // Manejo de la opci√≥n "Consultar mensualidad"
    if (message === "4" || message.toLowerCase() === "consultar mensualidad") {
      state.step = "esperando_cedula_consulta";
      await whatsappService.sendMessage(to, "üîç Por favor, ingresa tu n√∫mero de c√©dula para consultar el estado de tu membres√≠a:");
      return;
    }

    if (state.step === "esperando_cedula_consulta") {
      const cedula = message.trim();
      if (!/^\d{6,10}$/.test(cedula)) {
        await whatsappService.sendMessage(to, "‚ö†Ô∏è Por favor ingresa un n√∫mero de c√©dula v√°lido (entre 6 y 10 d√≠gitos).");
        return;
      }

      try {
        const resultado = await consultarMembresia(cedula);
        await whatsappService.sendMessage(to, resultado.mensaje);
        await this.sendInteractiveButtons(to, "¬øQu√© deseas hacer?", [
          { type: "reply", reply: { id: "nueva_consulta", title: "üîÅ Nueva consulta" } },
          { type: "reply", reply: { id: "finalizar_chat", title: "‚ùå Finalizar" } }
        ]);
      } catch (error) {
        console.error("Error al consultar membres√≠a:", error);
        await whatsappService.sendMessage(to, "‚ùå Ocurri√≥ un error al consultar la membres√≠a. Por favor, intenta m√°s tarde.");
      }
      return;
    }

    if (state.step === "esperando_pregunta_ia") {
      try {
        await whatsappService.sendMessage(to, "ü§ñ Pensando... un momento por favor.");
        
        const respuestaIA = await preguntarAGemini(message);
        await whatsappService.sendMessage(to, respuestaIA);

        // üëâ Control de consultas a Gemini
        const today = new Date().toISOString().split("T")[0]; // "YYYY-MM-DD"
        this.userQueryCounts[to] = this.userQueryCounts[to] || { fecha: today, count: 0 };

        // üîÅ Reiniciar si es un nuevo d√≠a
        if (this.userQueryCounts[to].fecha !== today) {
          this.userQueryCounts[to] = { fecha: today, count: 0 };
        }

        this.userQueryCounts[to].count += 1;

        const consultasHechas = this.userQueryCounts[to].count;

        if (consultasHechas >= 3) {
          await whatsappService.sendMessage(to, "‚ö†Ô∏è Has alcanzado el l√≠mite de *3 consultas* por hoy. Vuelve ma√±ana para hacer nuevas preguntas.");
          await this.sendInteractiveButtons(to, "¬øQu√© deseas hacer ahora?", [
            { type: "reply", reply: { id: "finalizar_chat", title: "‚úÖ Finalizar chat" } }
          ]);
          delete this.appointmentState[to]; // Opcional: cerrar flujo
        } else {
          await this.sendInteractiveButtons(to, "¬øDeseas hacer otra consulta o finalizar?", [
            { type: "reply", reply: { id: "opcion_3", title: "ü§ñ Otra consulta IA" } },
            { type: "reply", reply: { id: "finalizar_chat", title: "‚úÖ Finalizar chat" } }
          ]);
        }
      } catch (error) {
        console.error('Error en consulta IA:', error);
        await whatsappService.sendMessage(to, "‚ùå Ocurri√≥ un error al procesar tu consulta. Por favor, intenta nuevamente.");
      }
      return;
    }

    switch (state.step) {
      case 'name':
        if (!/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/.test(message)) {
          response = 'Por favor ingresa solo tu nombre y apellido, sin n√∫meros ni caracteres especiales.';
          break;
        }
  
        state.name = message.trim();
        state.step = 'age';
        this.userData[to] = { name: message.trim() };
        response = '¬øCu√°l es tu edad?';
        break;
  
        case 'age':
  if (!/^\d+$/.test(message)) {
    response = 'Por favor ingresa solo tu edad en n√∫meros. Ej: 25';
    break;
  }

  const age = parseInt(message, 10);
  if (age < 9 || age > 60) {
    response = 'üßç‚Äç‚ôÇÔ∏è La edad debe estar entre *9 y 60 a√±os*. Si tienes dudas, cont√°ctanos directamente üí¨.';
    break;
  }

  state.age = age;
  state.step = 'awaitingDayInput';
  response = `üìÖ ¬øPara qu√© d√≠a quieres agendar tu clase?\n\n1. Lunes\n2. Martes\n3. Mi√©rcoles\n4. Jueves\n5. Viernes\n6. S√°bado`;
  break;

case 'awaitingDayInput':
  const daySelection = message.trim().toLowerCase();
  const dayMap = {
    "1": "Lunes",
    "2": "Martes",
    "3": "Mi√©rcoles",
    "4": "Jueves",
    "5": "Viernes",
    "6": "S√°bado",
    "lunes": "Lunes",
    "martes": "Martes",
    "mi√©rcoles": "Mi√©rcoles",
    "miercoles": "Mi√©rcoles",
    "jueves": "Jueves",
    "viernes": "Viernes",
    "s√°bado": "S√°bado",
    "sabado": "S√°bado"
  };

  if (!dayMap[daySelection]) {
    response = "‚ùó Por favor responde con el *n√∫mero* o *nombre del d√≠a* (Ej: 1, lunes, s√°bado).";
    break;
  }

  state.day = dayMap[daySelection];
  state.step = "hour";
  response = "‚è∞ ¬øA qu√© hora quieres agendar tu clase? (formato 24h, ej: *14:30*)";
  break;

  
      case 'hour':
        const hourRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
        if (!hourRegex.test(message)) {
          response = "‚è∞ Por favor ingresa una hora v√°lida en formato 24 horas. Ejemplo: *14:30*";
          await whatsappService.sendMessage(to, response);
          return;
        }
  
        const [hour, minute] = message.split(":").map(Number);
        const totalMinutes = hour * 60 + minute;
        const minMinutes = 5 * 60;
        const maxMinutes = 21 * 60;
  
        if (totalMinutes < minMinutes || totalMinutes > maxMinutes) {
          response = "üïî El horario disponible para clases es de *05:00 a 21:00*. Por favor ingresa una hora dentro de ese rango.";
          await whatsappService.sendMessage(to, response);
          return;
        }
  
        state.hour = message;
        state.step = "reason";
        response = "¬øQu√© tipo de clase deseas?\n\n1. Yoga üßò‚Äç‚ôÇÔ∏è\n2. Crossfit üèãÔ∏è‚Äç‚ôÇÔ∏è\n3. Funcional üî•\n4. Entrenamiento personalizado üí™";
        break;
  
      case "reason":
        const input = message.trim().toLowerCase();
        let selectedClass = null;
  
        if (["1", "yoga", "yog"].some(v => input.includes(v))) {
          selectedClass = "Yoga";
        } else if (["2", "crossfit", "cross"].some(v => input.includes(v))) {
          selectedClass = "Crossfit";
        } else if (["3", "funcional", "funcion"].some(v => input.includes(v))) {
          selectedClass = "Funcional";
        } else if (["4", "entrenador", "personal"].some(v => input.includes(v))) {
          selectedClass = "Entrenador Personalizado";
        }
  
        if (selectedClass === "Entrenador Personalizado") {
          state.step = "trainerSelection";
          response = "¬øCon qu√© entrenador quieres agendar?\n\n1. Mateo üî•\n2. Laura üßò‚Äç‚ôÄÔ∏è\n3. Andr√©s ü¶æ";
        } else if (selectedClass) {
          state.reason = selectedClass;
          state.step = "confirmation";
          response = `üìù *Resumen de tu clase agendada:*\n\nüë§ Nombre: ${state.name}\nüéÇ Edad: ${state.age}\nüìÖ D√≠a: ${state.day}\nüïí Hora: ${state.hour}\nüèãÔ∏è Clase: ${state.reason}\n\n¬øDeseas confirmar tu cita?`;
          await whatsappService.sendMessage(to, response);
          await this.sendInteractiveButtons(to, "Confirma tu cita:", [
            { type: "reply", reply: { id: "confirmar", title: "‚úÖ Confirmar" } },
            { type: "reply", reply: { id: "cancelar", title: "‚ùå Cancelar" } }
          ]);
          return;
        } else {
          response = "Por favor selecciona una opci√≥n v√°lida (1-4 o escribe el nombre de la clase).";
        }
        break;
  
      case "trainerSelection":
        const trainerInput = message.trim().toLowerCase();
        let selectedTrainer = null;
  
        if (["1", "mateo", "mat"].some(v => trainerInput.includes(v))) {
          selectedTrainer = "Mateo";
        } else if (["2", "laura", "lau"].some(v => trainerInput.includes(v))) {
          selectedTrainer = "Laura";
        } else if (["3", "andres", "andr√©s", "andr"].some(v => trainerInput.includes(v))) {
          selectedTrainer = "Andr√©s";
        }
  
        if (selectedTrainer) {
          state.reason = `Entrenador Personal con ${selectedTrainer}`;
          state.step = "confirmation";
          response = `üìù *Resumen de tu clase agendada:*\n\nüë§ Nombre: ${state.name}\nüéÇ Edad: ${state.age}\nüìÖ D√≠a: ${state.day}\nüïí Hora: ${state.hour}\nüèãÔ∏è Clase: ${state.reason}\n\n¬øDeseas confirmar tu cita?`;
          await whatsappService.sendMessage(to, response);
          await this.sendInteractiveButtons(to, "Confirma tu cita:", [
            { type: "reply", reply: { id: "confirmar", title: "‚úÖ Confirmar" } },
            { type: "reply", reply: { id: "cancelar", title: "‚ùå Cancelar" } }
          ]);
          return;
        } else {
          response = "Por favor selecciona un entrenador v√°lido (1, 2, 3 o su nombre). Ej: Mateo, Laura o Andr√©s.";
        }
        break;
  
        case "confirmation":
          if (message === "confirmar") {
            try {
              const existingAppointments = await getAppointments();
              const alreadyRegistered = existingAppointments.some(
                (appointment) =>
                  appointment.name === state.name &&
                  appointment.day === state.day &&
                  appointment.reason === state.reason
              );
        
              if (alreadyRegistered) {
                await whatsappService.sendMessage(
                  to,
                  "üìå Ya tienes una clase agendada con esos datos. Si necesitas cambiarla, responde con *cancelar* y vuelve a intentarlo.",
                  messageId
                );
              } else {
                const row = [
                  to, // üëà N√∫mero de tel√©fono de WhatsApp (formato +573001234567)
                  state.name,
                  state.age,
                  state.day,
                  state.reason,
                  state.hour,
                  new Date().toLocaleString("es-CO", { timeZone: "America/Bogota" })
                ];
                
        
                await appendToSheet(row);
                await whatsappService.sendMessage(
                  to,
                  "‚úÖ ¬°Tu clase ha sido agendada y registrada! Nos pondremos en contacto contigo en un momento para confirmar la fecha y hora. ¬°Nos vemos pronto! üí™",
                  messageId
                );
              }
            } catch (err) {
              console.error("Error al procesar la cita:", err);
              await whatsappService.sendMessage(
                to,
                "‚ö†Ô∏è Ocurri√≥ un error al guardar los datos. Intenta nuevamente o cont√°ctanos.",
                messageId
              );
            }
        
            delete this.appointmentState[to];
        
            // üîò Botones finales
            await this.sendInteractiveButtons(to, "¬øQu√© deseas hacer ahora?", [
              { type: "reply", reply: { id: "finalizar_chat", title: "‚úÖ Finalizar chat" } },
              { type: "reply", reply: { id: "volver_menu", title: "üè† Volver al men√∫" } }
            ]);
        
          } else if (message === "cancelar") {
            await whatsappService.sendMessage(
              to,
              "‚ùå Tu cita ha sido cancelada.",
              messageId
            );
        
            delete this.appointmentState[to];
        
            // üîò Botones finales tambi√©n despu√©s de cancelar
            await this.sendInteractiveButtons(to, "¬øQu√© deseas hacer ahora?", [
              { type: "reply", reply: { id: "finalizar_chat", title: "‚úÖ Finalizar chat" } },
              { type: "reply", reply: { id: "volver_menu", title: "üè† Volver al men√∫" } }
            ]);
        
          } else {
            await whatsappService.sendMessage(
              to,
              "Por favor elige una opci√≥n v√°lida para confirmar o cancelar.",
              messageId
            );
          }
          return;


          case "consultas_lista":
  const option = message.trim().toLowerCase();
  const normalized = option.replace(/[^a-z0-9√°√©√≠√≥√∫√±√º]/gi, '').toLowerCase();

  if (["1", "precios", "membresia", "membres√≠as"].includes(normalized)) {
    response = `üí∞ *Precios y membres√≠as:*\n\n- Mensual: $60.000 COP\n- Quincenal: $35.000 COP\n- D√≠a: $10.000 COP\n\nIncluye acceso completo a todas las zonas del gimnasio, y orientaci√≥n de los entrenadores.`;
  } else if (["2", "horarios", "horario"].includes(normalized)) {
    response = `üïí *Horarios del Gym:*\n\nLunes a Viernes: 5:00am - 9:00pm\nS√°bados: 6:00am - 12:00m\nDomingos y festivos: Cerrado.`;
  } else if (["3", "ubicacion", "ubicaci√≥n", "contacto", "direccion", "direcci√≥n"].includes(normalized)) {
    response = `üìç *Ubicaci√≥n y contacto:*\n\nüìå Direcci√≥n: Calle 123 #45-67, Zarzal\nüìû Tel: +57 3116561249\nüìß Email: @gymbro@gmail.com\nüïò Atenci√≥n: Lun-S√°b en el horario establecido`;
  } else if (["5", "pausar", "pausar membresia"].includes(normalized)) {
    state.step = "pausar_nombre";
    await whatsappService.sendMessage(to, `üìù Para solicitar una pausa de tu membres√≠a, primero necesito algunos datos.\n\nPor favor, escribe tu nombre y apellido:`);
    return;
  } else if (["6", "asesor", "hablar asesor"].includes(normalized)) {
    response = `üì≤ Un asesor se pondr√° en contacto contigo pronto. ¬°Gracias por escribirnos! üí¨`;
  } else {
    response = `‚ùì Opci√≥n no v√°lida. Por favor escribe el n√∫mero o nombre de la consulta:\n\n1. Precios üí∞\n2. Horarios üïí\n3. Ubicaci√≥n y contacto üìç\n4. Consultar mensualidad üßæ\n5. Pausar membres√≠a ‚è∏Ô∏è\n6. Contactar asesor ü§ù`;
  }

  await whatsappService.sendMessage(to, response);
  if (!["pausar_nombre", "esperando_cedula_consulta"].includes(state.step)) {
    await this.sendInteractiveButtons(to, "¬øDeseas realizar otra consulta o finalizar?", [
      { type: "reply", reply: { id: "consulta_otra", title: "üîÅ Otra consulta" } },
      { type: "reply", reply: { id: "consulta_finalizar", title: "‚ùå Finalizar" } }
    ]);
  }
  return;

case "pausar_nombre":
    const nombreCompleto = message.trim();
    if (!/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/.test(nombreCompleto)) {
      response = "‚ö†Ô∏è Por favor ingresa un nombre v√°lido (solo letras y espacios).";
      break;
    }
    
    state.nombre = nombreCompleto;
    state.step = "pausar_cedula";
    response = "‚è∏Ô∏è Ahora, por favor ingresa tu n√∫mero de c√©dula:";
    await whatsappService.sendMessage(to, response);
    return;

case "pausar_cedula":
    const cedulaPausa = message.trim();
    if (!/^\d{6,10}$/.test(cedulaPausa)) {
      response = "‚ö†Ô∏è Por favor ingresa un n√∫mero de c√©dula v√°lido para pausar tu membres√≠a. Ej: 1032456789";
      break;
    }
  
    state.cedula = cedulaPausa;
    state.step = "pausar_motivo";
  
    await whatsappService.sendMessage(to, "üìù Por favor cu√©ntanos brevemente el motivo por el cual deseas pausar tu membres√≠a:");
    return;

case "pausar_motivo":
    const motivo = message.trim();
    const timestamp = new Date().toLocaleString("es-CO", { timeZone: "America/Bogota" });
    // Ordenamos los datos seg√∫n las columnas: [telefono, cedula, nombre, motivo, fecha, estado]
    const pausaData = [
      to,                // N√∫mero de tel√©fono
      state.cedula,      // C√©dula
      state.nombre,      // Nombre completo
      motivo,           // Motivo/raz√≥n
      timestamp,        // Fecha y hora
      ""                // Estado (vac√≠o para manejo manual)
    ];

    try {
      await appendPauseToSheet(pausaData);
      response = `‚è∏Ô∏è Tu solicitud de pausa ha sido registrada con √©xito.\n\n*Datos registrados:*\nüë§ Nombre: ${state.nombre}\nüìã C√©dula: ${state.cedula}\n\nUn asesor revisar√° tu caso y te contactar√° pronto. ¬°Gracias por informarnos!`;
    } catch (err) {
      console.error("Error al registrar pausa:", err);
      response = "‚ùå Ocurri√≥ un error al guardar tu solicitud. Intenta m√°s tarde.";
    }

    delete this.appointmentState[to];
    await whatsappService.sendMessage(to, response);
    await this.sendInteractiveButtons(to, "¬øQu√© deseas hacer ahora?", [
      { type: "reply", reply: { id: "volver_menu", title: "üè† Volver al men√∫" } },
      { type: "reply", reply: { id: "finalizar_chat", title: "‚úÖ Finalizar chat" } }
    ]);
    return;

            

  // ‚úÖ SOLO si NO cambia a otro step, se env√≠an los botones
  await whatsappService.sendMessage(to, response);
  await this.sendInteractiveButtons(to, "¬øDeseas realizar otra consulta o finalizar?", [
    { type: "reply", reply: { id: "consulta_otra", title: "üîÅ Otra consulta" } },
    { type: "reply", reply: { id: "consulta_finalizar", title: "‚ùå Finalizar" } }
  ]);
  return;

    }

    
  
    // ‚úÖ Validaci√≥n segura antes de enviar el mensaje
    if (typeof response === "string" && response.trim() !== "") {
      await whatsappService.sendMessage(to, response);
    }
  }

  async sendInteractiveButtons(to, text, buttons) {
    await whatsappService.sendInteractiveButtons(to, text, buttons);
  }

  // Agregar m√©todo para manejar el contador de consultas
  checkConsultaLimit(from) {
    const today = new Date().toDateString();
    
    // Reiniciar contador si es un nuevo d√≠a
    if (this.lastConsultDate[from] !== today) {
      this.consultaCounter[from] = 0;
      this.lastConsultDate[from] = today;
    }

    return this.consultaCounter[from] < 3;
  }
}

export default new MessageHandler();